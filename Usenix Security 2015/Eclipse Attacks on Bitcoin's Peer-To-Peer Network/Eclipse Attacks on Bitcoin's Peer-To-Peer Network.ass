[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 854
PlayResY: 480

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: Eclipse Attacks on Bitcoin’s Peer-to-Peer Network (USENIX 2015).mp4
Video File: Eclipse Attacks on Bitcoin’s Peer-to-Peer Network (USENIX 2015).mp4
Video AR Mode: 4
Video AR Value: 1.779167
Video Zoom Percent: 0.875000
Scroll Position: 292
Active Line: 308
Video Position: 38781

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.33333,1.33333,2,7,7,7,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,{\pos(426.333,33.333)}听译、时间轴：刘巍然（学酥）
Dialogue: 0,0:00:16.20,0:00:21.66,Default,,0,0,0,,我们一般认为 只要51%的挖矿算力是诚实的 比特币系统就是安全的
Dialogue: 0,0:00:22.78,0:00:27.12,Default,,0,0,0,,但这需要假定所有参与方都可以看到所有有效的区块和交易
Dialogue: 0,0:00:27.12,0:00:30.86,Default,,0,0,0,,比特币依赖于点对点网络传输信息
Dialogue: 0,0:00:31.78,0:00:38.02,Default,,0,0,0,,因此 如果你能控制点对点网络 你就可以控制比特币系统的信息流 从而控制区块链
Dialogue: 0,0:00:40.48,0:00:46.84,Default,,0,0,0,,本次讲座中 我们将通过日蚀点对点网络中的通信信息来破坏比特币系统的安全性
Dialogue: 0,0:00:48.24,0:00:53.08,Default,,0,0,0,,首先 我会为大家讲解什么是日蚀攻击 可以利用日蚀攻击达到何种攻击效果
Dialogue: 0,0:00:53.74,0:00:57.66,Default,,0,0,0,,随后 我会为大家讲解如何实施日蚀攻击
Dialogue: 0,0:00:57.66,0:01:04.94,Default,,0,0,0,,如何将自己放置在实施日蚀攻击的位置上 以及实施日蚀攻击所需的必要资源
Dialogue: 0,0:01:04.94,0:01:11.00,Default,,0,0,0,,最后 我会讨论抵御日蚀攻击的方法 以及防御方法在比特币系统中的部署情况
Dialogue: 0,0:01:11.00,0:01:16.76,Default,,0,0,0,,在讲解什么是日蚀攻击前 我需要简单向大家解释一下比特币系统的点对点网络
Dialogue: 0,0:01:16.76,0:01:21.28,Default,,0,0,0,,点对点网络中包含很多节点 这里我们先主要关注紫色的节点
Dialogue: 0,0:01:21.70,0:01:25.20,Default,,0,0,0,,默认情况下 节点可以向外创建8个TCP连接
Dialogue: 0,0:01:25.20,0:01:28.28,Default,,0,0,0,,箭头所指的方向表示TCP连接的方向
Dialogue: 0,0:01:29.04,0:01:34.64,Default,,0,0,0,,同时 节点可以接受最多117个对内的TCP连接
Dialogue: 0,0:01:37.72,0:01:47.82,Default,,0,0,0,,节点通过这些连接获取交易和区块 其中区块是交易的特定聚合形式
Dialogue: 0,0:01:48.58,0:01:53.96,Default,,0,0,0,,我用这种蓝色方块图标表示区块
Dialogue: 0,0:01:53.96,0:01:58.58,Default,,0,0,0,,我们可以看到 某个节点发现了一个区块 随后它会将区块发送到整个网络中
Dialogue: 0,0:01:58.58,0:02:03.28,Default,,0,0,0,,区块会通过这些边所代表的连接进行传递 传递是双向的
Dialogue: 0,0:02:05.24,0:02:11.22,Default,,0,0,0,,我们的攻击只关注接受对内TCP连接的节点
Dialogue: 0,0:02:12.58,0:02:14.66,Default,,0,0,0,,并非所有节点都接受对内TCP连接
Dialogue: 0,0:02:14.66,0:02:18.24,Default,,0,0,0,,一些钱包所关联的节点不会接受对内的连接
Dialogue: 0,0:02:19.86,0:02:21.38,Default,,0,0,0,,什么是日蚀攻击？
Dialogue: 0,0:02:21.38,0:02:34.46,Default,,0,0,0,,日蚀指的是信息日蚀 如果你可以控制点对点网络中节点所获取的信息 就成为日蚀
Dialogue: 0,0:02:34.46,0:02:42.60,Default,,0,0,0,,例如 如果与紫色节点建立连接的节点都是发动合谋攻击的节点
Dialogue: 0,0:02:43.10,0:02:47.64,Default,,0,0,0,,那么这些攻击节点就可以阻止紫色节点获取全网的区块信息了
Dialogue: 0,0:02:47.64,0:02:54.44,Default,,0,0,0,,攻击节点也可以合谋告知紫色节点的一些信息 同时不把这些信息告知到全网
Dialogue: 0,0:02:56.88,0:03:00.24,Default,,0,0,0,,一般来说 攻击者一般不会处在实施攻击的位置上
Dialogue: 0,0:03:00.24,0:03:03.14,Default,,0,0,0,,我们后面会为大家讲解 攻击者如何站在实施攻击的位置上
Dialogue: 0,0:03:03.14,0:03:09.08,Default,,0,0,0,,在此之前 我想解释一下 如果节点被日蚀 此会发生什么严重的后果
Dialogue: 0,0:03:10.50,0:03:12.22,Default,,0,0,0,,我们可以把攻击示意图重新绘制一下
Dialogue: 0,0:03:12.22,0:03:17.18,Default,,0,0,0,,攻击者位于紫色节点和剩余网络的中间位置
Dialogue: 0,0:03:17.18,0:03:20.44,Default,,0,0,0,,但这不意味着攻击者必须位于通信路径连接处
Dialogue: 0,0:03:21.14,0:03:24.34,Default,,0,0,0,,这只意味着与紫色节点建立连接的节点都是攻击节点
Dialogue: 0,0:03:24.34,0:03:26.82,Default,,0,0,0,,攻击者可以决定紫色节点所能接收到的信息
Dialogue: 0,0:03:27.92,0:03:30.90,Default,,0,0,0,,如果我们可以日蚀一个节点 会发生什么问题？
Dialogue: 0,0:03:30.90,0:03:36.82,Default,,0,0,0,,会发生的问题是 攻击者可以用少于50%的算力实施50%攻击
Dialogue: 0,0:03:36.82,0:03:40.26,Default,,0,0,0,,在幻灯片的例子中 我们有一个拥有40%算力的攻击者
Dialogue: 0,0:03:40.26,0:03:43.58,Default,,0,0,0,,蓝色节点也是一个旷工 拥有30%的算力
Dialogue: 0,0:03:43.58,0:03:47.88,Default,,0,0,0,,网络中的其余节点总计有30%的算力 我们用一个云图表示网络中的其余节点
Dialogue: 0,0:03:48.22,0:03:51.38,Default,,0,0,0,,我们在左上角给出每一个参与方所看到的区块链
Dialogue: 0,0:03:51.38,0:03:54.44,Default,,0,0,0,,攻击还没有开始 所以每一个参与方看到的都是蓝色的区块
Dialogue: 0,0:03:55.84,0:03:58.94,Default,,0,0,0,,攻击者要做的第一件事情就是把网络划分为两部分 
Dialogue: 0,0:03:58.94,0:04:03.40,Default,,0,0,0,,使得两个参与方相互之间无法收到对方生成的新区块
Dialogue: 0,0:04:05.14,0:04:09.72,Default,,0,0,0,,这样一来 攻击者就可以独立与两部分参与方竞争区块生成速度了
Dialogue: 0,0:04:09.72,0:04:15.14,Default,,0,0,0,,由于攻击者有40%的挖矿算力 因此攻击者可以生成比紫色节点更长的区块
Dialogue: 0,0:04:15.82,0:04:18.22,Default,,0,0,0,,比特币全网总接受最长的区块
Dialogue: 0,0:04:18.22,0:04:22.16,Default,,0,0,0,,攻击者也可以用相同的方法对另一部分网络实施攻击
Dialogue: 0,0:04:22.16,0:04:26.54,Default,,0,0,0,,这样一来 攻击者生成的区块链会得到全网的共识
Dialogue: 0,0:04:26.54,0:04:36.78,Default,,0,0,0,,此攻击与51%攻击等价 因为攻击保证只有攻击者生成的区块才能被添加到区块链中
Dialogue: 0,0:04:36.78,0:04:42.18,Default,,0,0,0,,因此 攻击者有能力选择添加至区块链中的交易 使得整个比特币停止运行
Dialogue: 0,0:04:42.18,0:04:48.76,Default,,0,0,0,,攻击者还可以对历史区块链进行篡改 还可以实现其它一系列攻击效果
Dialogue: 0,0:04:49.46,0:04:54.88,Default,,0,0,0,,此攻击实例中 我们假设攻击者不仅拥有日蚀能力 还拥有挖矿算力
Dialogue: 0,0:04:55.66,0:04:59.46,Default,,0,0,0,,当攻击者拥有挖矿算力时 攻击者可以进一步实现其它攻击目的
Dialogue: 0,0:04:59.46,0:05:03.96,Default,,0,0,0,,例如 我们可以改进自私挖矿攻击 这里我就不详细讲解改进方式了
Dialogue: 0,0:05:04.96,0:05:09.28,Default,,0,0,0,,现在 我们先看看 当攻击者没有任何挖矿算力时 可以完成何种攻击目标
Dialogue: 0,0:05:09.70,0:05:11.86,Default,,0,0,0,,我们在攻击演示图中增加一个商人
Dialogue: 0,0:05:11.86,0:05:17.10,Default,,0,0,0,,紫色节点和商人可以看到相同的区块链
Dialogue: 0,0:05:17.10,0:05:19.54,Default,,0,0,0,,现在 攻击者想实现双重花费
Dialogue: 0,0:05:19.54,0:05:25.16,Default,,0,0,0,,这里我们假定紫色节点拥有30%的算力 网络中的剩余节点拥有70%的算力
Dialogue: 0,0:05:25.16,0:05:28.04,Default,,0,0,0,,攻击者要对一笔交易实现双重花费
Dialogue: 0,0:05:28.66,0:05:32.72,Default,,0,0,0,,攻击者在左侧的交易中将COIN_0支付给了商人
Dialogue: 0,0:05:32.72,0:05:37.46,Default,,0,0,0,,而另一个双重花费交易将COIN_0返还给了攻击者
Dialogue: 0,0:05:38.48,0:05:40.52,Default,,0,0,0,,攻击者将网络划分成了两个部分
Dialogue: 0,0:05:41.94,0:05:45.62,Default,,0,0,0,,由于旷工和商人看到的是相同的区块链
Dialogue: 0,0:05:45.62,0:05:53.18,Default,,0,0,0,,旷工将此交易包含在区块中 并在此区块上挖矿
Dialogue: 0,0:05:53.96,0:05:56.56,Default,,0,0,0,,网络剩余节点也会完成相同的操作
Dialogue: 0,0:05:56.56,0:06:00.24,Default,,0,0,0,,网络剩余节点看到双重花费交易 将交易包含在区块中 尝试创建此区块
Dialogue: 0,0:06:01.98,0:06:05.08,Default,,0,0,0,,但是这两个参与方并不知道网络中还存在另一个区块链
Dialogue: 0,0:06:05.08,0:06:09.64,Default,,0,0,0,,因此 由于攻击者将网络划分成两部分 商人完全没办法知道交易被双重花费了
Dialogue: 0,0:06:09.64,0:06:13.94,Default,,0,0,0,,同时 商人也完全不知道网络中还存在一个更长的区块链
Dialogue: 0,0:06:13.94,0:06:16.62,Default,,0,0,0,,因此 商人会把货品发送给攻击者
Dialogue: 0,0:06:18.38,0:06:22.36,Default,,0,0,0,,接下来 攻击者移除其设置的中继节点
Dialogue: 0,0:06:22.36,0:06:27.22,Default,,0,0,0,,一瞬间 商人看到的区块链就不合法了 此区块链会被全网移除
Dialogue: 0,0:06:27.22,0:06:31.66,Default,,0,0,0,,支付给商人的交易会被全网移除 攻击者重新得到了已经支付的数字货币
Dialogue: 0,0:06:31.66,0:06:38.58,Default,,0,0,0,,此攻击过程中 商人的确看到交易已经被确认 图中显示交易已经被三个区块确认
Dialogue: 0,0:06:38.58,0:06:40.20,Default,,0,0,0,,商人会认为此交易已经安全
Dialogue: 0,0:06:40.20,0:06:44.36,Default,,0,0,0,,但由于日蚀攻击 商人并不能意识到此交易仍然不安全
Dialogue: 0,0:06:44.36,0:06:47.04,Default,,0,0,0,,这样一来 攻击者有能力实施双重花费攻击
Dialogue: 0,0:06:48.36,0:06:55.06,Default,,0,0,0,,此攻击者没有任何挖矿算力 它利用了第三方提供的挖矿算力
Dialogue: 0,0:06:55.06,0:06:59.96,Default,,0,0,0,,在我们的论文中 我们给出了其它一些挖矿算力日蚀攻击
Dialogue: 0,0:07:01.30,0:07:06.08,Default,,0,0,0,,现在 我将会为大家解释如何实施此攻击
Dialogue: 0,0:07:06.08,0:07:10.98,Default,,0,0,0,,一般来说 当攻击者加入网络 想向紫色节点发起攻击时
Dialogue: 0,0:07:11.60,0:07:15.98,Default,,0,0,0,,攻击者不一定能和紫色节点建立连接
Dialogue: 0,0:07:15.98,0:07:21.38,Default,,0,0,0,,因此 攻击者需要对紫色节点进行操控 使得紫色节点可以与攻击者建立对外连接
Dialogue: 0,0:07:22.44,0:07:28.60,Default,,0,0,0,,攻击者需要将紫色节点存储的节点表替换为攻击者的IP地址
Dialogue: 0,0:07:28.60,0:07:31.32,Default,,0,0,0,,我会在下一页幻灯片中解释节点表的工作原理
Dialogue: 0,0:07:32.22,0:07:35.56,Default,,0,0,0,,当节点重启时 节点会丢失其建立的所有对外连接
Dialogue: 0,0:07:35.56,0:07:40.00,Default,,0,0,0,,此时 节点会从节点表中读取IP地址 并建立新的连接
Dialogue: 0,0:07:40.00,0:07:43.82,Default,,0,0,0,,由于节点表中所有IP地址都是攻击者的 因此节点会与攻击者建立连接
Dialogue: 0,0:07:44.50,0:07:46.58,Default,,0,0,0,,节点表是如何工作的呢？
Dialogue: 0,0:07:46.58,0:07:51.00,Default,,0,0,0,,每个节点会从两个表中选择建立连接的节点IP
Dialogue: 0,0:07:51.00,0:07:57.20,Default,,0,0,0,,新表存储了此节点知晓、但是尚未和此节点建立连接的节点IP地址
Dialogue: 0,0:07:57.20,0:08:04.80,Default,,0,0,0,,过表存储了曾经与此节点建立过连接、但现在可能没有建立连接的节点IP地址
Dialogue: 0,0:08:05.50,0:08:10.06,Default,,0,0,0,,两个表都包含分桶 分桶中存储了具体的IP地址
Dialogue: 0,0:08:10.06,0:08:15.50,Default,,0,0,0,,我们用绿色圆圈表示诚实IP地址
Dialogue: 0,0:08:16.56,0:08:19.84,Default,,0,0,0,,两个表会为每个IP地址存储一个对应的时间戳
Dialogue: 0,0:08:20.52,0:08:25.04,Default,,0,0,0,,我这里不会为大家解释新表中时间戳的作用 因为这对发起攻击起不到关键作用
Dialogue: 0,0:08:25.04,0:08:31.48,Default,,0,0,0,,过表中存储的时间戳 指的是节点与此节点最晚建立连接的时间
Dialogue: 0,0:08:31.48,0:08:34.60,Default,,0,0,0,,也就是节点与此节点建立连接的最晚时间
Dialogue: 0,0:08:35.38,0:08:39.56,Default,,0,0,0,,如果一个节点想创建一个对外连接 它需要从这两个表中选择IP地址
Dialogue: 0,0:08:39.56,0:08:43.42,Default,,0,0,0,,节点首先会确定其从新表还是从过表中选择IP地址
Dialogue: 0,0:08:43.42,0:08:46.96,Default,,0,0,0,,一旦它选择好了表 它就会从这张表中选择一个IP地址
Dialogue: 0,0:08:47.44,0:08:51.18,Default,,0,0,0,,节点会尽可能选择对应时间戳更接近当前时间的IP地址
Dialogue: 0,0:08:51.86,0:08:54.96,Default,,0,0,0,,随后 节点尝试与此IP地址建立对外连接
Dialogue: 0,0:08:54.96,0:09:00.76,Default,,0,0,0,,攻击者要做的是用攻击者IP地址、即图中红色源泉的地址填满这两个表
Dialogue: 0,0:09:01.26,0:09:05.96,Default,,0,0,0,,使得当节点选择IP地址时 其只能选到攻击者的IP地址
Dialogue: 0,0:09:06.60,0:09:14.60,Default,,0,0,0,,进一步 攻击者需要保证攻击者IP地址的时间戳永远是最新的 从而持续发起攻击
Dialogue: 0,0:09:15.98,0:09:20.26,Default,,0,0,0,,攻击者如何让自己的IP地址进入到这两个表中？
Dialogue: 0,0:09:20.26,0:09:28.38,Default,,0,0,0,,当节点与另一个节点建立连接时 此节点会从另一个节点的过表中得到IP地址
Dialogue: 0,0:09:28.92,0:09:36.30,Default,,0,0,0,,进一步 一旦建立连接 节点可以宣布其它节点的IP 这些IP会进入到此节点的新表中
Dialogue: 0,0:09:36.30,0:09:40.20,Default,,0,0,0,,我这里画了4个红色的点 大家可以想象一共有…
Dialogue: 0,0:09:40.20,0:09:46.02,Default,,0,0,0,,在实际中 通信的消息可能包含上千个IP地址 一个节点也可以发送多个消息
Dialogue: 0,0:09:46.02,0:09:49.76,Default,,0,0,0,,很容易在新表中填满攻击者的IP地址 我就不详细讲解方法了
Dialogue: 0,0:09:49.76,0:09:51.94,Default,,0,0,0,,在过表中填满攻击者的IP地址是很困难的
Dialogue: 0,0:09:51.94,0:09:56.32,Default,,0,0,0,,这也是我们在实施攻击时关注的核心步骤
Dialogue: 0,0:09:57.06,0:09:58.92,Default,,0,0,0,,一旦成功 攻击者就可以重复这一步骤
Dialogue: 0,0:09:58.92,0:10:06.78,Default,,0,0,0,,对于在控制范围内的每一个节点 攻击者都可以把其控制的IP地址不断传入过表中
Dialogue: 0,0:10:13.64,0:10:16.08,Default,,0,0,0,,随后 攻击者等待此节点重启
Dialogue: 0,0:10:16.48,0:10:21.24,Default,,0,0,0,,一旦节点重启 当此节点选择并建立新的对外连接时
Dialogue: 0,0:10:21.24,0:10:26.94,Default,,0,0,0,,因为过表和新表中的IP地址都被攻击者所控制 此节点会与攻击者IP地址建立连接
Dialogue: 0,0:10:27.66,0:10:30.86,Default,,0,0,0,,这样一来 攻击者就日蚀了这个节点的所有对外连接
Dialogue: 0,0:10:30.86,0:10:33.36,Default,,0,0,0,,但请大家注意 这些节点还包含了对内连接
Dialogue: 0,0:10:33.36,0:10:34.66,Default,,0,0,0,,如何日蚀对内连接呢？
Dialogue: 0,0:10:34.66,0:10:39.08,Default,,0,0,0,,非常简单 攻击者可以对相同的IP地址建立117个对内连接
Dialogue: 0,0:10:39.08,0:10:44.74,Default,,0,0,0,,这样就可以日蚀此节点的全部对内连接了
Dialogue: 0,0:10:45.58,0:10:51.06,Default,,0,0,0,,节点很容易重启吗？实际中可行吗？为何节点会重启？攻击过程需要节点重启
Dialogue: 0,0:10:51.86,0:10:55.30,Default,,0,0,0,,我们知道 用户每周基本会有一天要为计算机安装补丁
Dialogue: 0,0:10:55.30,0:10:59.60,Default,,0,0,0,,因此 攻击者可以在补丁发布前一段时间实施攻击 或等待补丁发布
Dialogue: 0,0:10:59.60,0:11:08.62,Default,,0,0,0,,每隔一段时间总会出现一些重要安全漏洞补丁的 节点或者打补丁 或者等着被攻击
Dialogue: 0,0:11:09.38,0:11:14.92,Default,,0,0,0,,在比特币中 每隔一段时间就会发布一些抵御拒绝服务攻击漏洞的补丁
Dialogue: 0,0:11:14.92,0:11:17.00,Default,,0,0,0,,操作系统发布补丁的频率会更高
Dialogue: 0,0:11:17.74,0:11:25.70,Default,,0,0,0,,研究表明 每过10小时 一个比特币公开节点就会有25%的概率变为离线状态
Dialogue: 0,0:11:26.36,0:11:31.36,Default,,0,0,0,,需要注意的是 比特币点对点网络的安全性并不要求所有节点时刻保持在线状态
Dialogue: 0,0:11:33.10,0:11:37.58,Default,,0,0,0,,当然了 填满过表并不像想象中的那样容易
Dialogue: 0,0:11:37.58,0:11:40.84,Default,,0,0,0,,此过程包含一个复杂的细节步骤 这也是这些分桶的核心作用
Dialogue: 0,0:11:40.84,0:11:48.24,Default,,0,0,0,,当一个IP地址被发送到过表中时 比特币系统会把此IP地址分成两个部分
Dialogue: 0,0:11:48.24,0:11:53.48,Default,,0,0,0,,第一个部分称为组 第一个部分包含IP地址的16位前缀
Dialogue: 0,0:11:53.48,0:11:58.02,Default,,0,0,0,,而16位后缀就是IP地址的另一部分了
Dialogue: 0,0:11:58.96,0:12:03.18,Default,,0,0,0,,我们用哈希算法将组分成4个桶 因此每个组会对应4个桶
Dialogue: 0,0:12:03.78,0:12:10.74,Default,,0,0,0,,随后 我们会选择其中一个桶 并把IP地址的第二部分放入这个桶中
Dialogue: 0,0:12:10.74,0:12:13.84,Default,,0,0,0,,这一存储过程会让攻击实施起来更加困难
Dialogue: 0,0:12:13.84,0:12:16.88,Default,,0,0,0,,假设我们有一系列连续的IP地址
Dialogue: 0,0:12:18.74,0:12:25.10,Default,,0,0,0,,由于IP地址是连续的 因此这些IP地址会很容易被划分在相同的组中
Dialogue: 0,0:12:25.10,0:12:26.94,Default,,0,0,0,,这些IP地址的16位前缀会完全一致
Dialogue: 0,0:12:26.94,0:12:29.20,Default,,0,0,0,,因此 我们只能用攻击IP地址填满4个桶
Dialogue: 0,0:12:29.62,0:12:32.76,Default,,0,0,0,,这意味着攻击节点包含大量的IP地址 
Dialogue: 0,0:12:33.66,0:12:37.84,Default,,0,0,0,,或者攻击节点需要一个僵尸网络 使IP地址足够多样化
Dialogue: 0,0:12:38.24,0:12:40.04,Default,,0,0,0,,在论文中 我们同时考虑了这两种场景
Dialogue: 0,0:12:40.04,0:12:44.10,Default,,0,0,0,,在本次讲座中 我们只考虑僵尸网络这一场景
Dialogue: 0,0:12:45.18,0:12:46.28,Default,,0,0,0,,你该怎么做呢？
Dialogue: 0,0:12:46.28,0:12:48.98,Default,,0,0,0,,你是一个攻击者 你只有有限个IP地址
Dialogue: 0,0:12:49.68,0:12:52.08,Default,,0,0,0,,你拥有的IP地址越多 你就越容易发起攻击
Dialogue: 0,0:12:52.08,0:12:58.14,Default,,0,0,0,,IP地址越被划分在不同的组中 过表中的诚实节点IP地址就会越少 情况越好
Dialogue: 0,0:12:58.14,0:13:02.34,Default,,0,0,0,,因为与你竞争的IP地址就会越少
Dialogue: 0,0:13:03.06,0:13:05.62,Default,,0,0,0,,我们已经讲解过 IP地址的选择是有偏的 
Dialogue: 0,0:13:05.62,0:13:09.20,Default,,0,0,0,,你可以利用这一点 使节点尽可能与攻击节点建立连接
Dialogue: 0,0:13:09.20,0:13:15.72,Default,,0,0,0,,注意到 如果你能让诚实节点的时间戳越陈旧 攻击成功的概率也会越高
Dialogue: 0,0:13:15.72,0:13:18.76,Default,,0,0,0,,因此 你能做的是长时间地运行攻击过程
Dialogue: 0,0:13:18.76,0:13:23.74,Default,,0,0,0,,如果诚实节点的时间戳都是1小时之前 而你的攻击过程执行了5个小时
Dialogue: 0,0:13:23.74,0:13:25.62,Default,,0,0,0,,则诚实节点时间戳就变成6小时前了
Dialogue: 0,0:13:26.10,0:13:31.48,Default,,0,0,0,,你基本上可以利用两种资源：你拥有的IP地址 以及发动攻击的时间长度
Dialogue: 0,0:13:33.42,0:13:36.66,Default,,0,0,0,,当然 情况比想象的糟糕 攻击者可以利用的点比想象的多
Dialogue: 0,0:13:37.46,0:13:40.94,Default,,0,0,0,,每个分桶只能存储64个IP地址
Dialogue: 0,0:13:40.94,0:13:45.34,Default,,0,0,0,,如果一个分桶已经满了 即这个分桶已经包含了64个IP地址 
Dialogue: 0,0:13:45.98,0:13:50.60,Default,,0,0,0,,当新的IP地址被哈希到这个桶中时 节点会从桶中驱逐出一些IP地址
Dialogue: 0,0:13:50.60,0:13:53.18,Default,,0,0,0,,比特币系统中的地址驱逐过程是 
Dialogue: 0,0:13:53.18,0:14:00.12,Default,,0,0,0,,从旧IP地址中随机选择4个IP地址并驱逐 再将4个新的IP地址添加进桶中
Dialogue: 0,0:14:00.12,0:14:05.10,Default,,0,0,0,,这进一步为攻击者提供了2个漏洞
Dialogue: 0,0:14:05.10,0:14:11.96,Default,,0,0,0,,因为被驱逐的IP地址是随机选择的 如果攻击者的一个IP地址被驱逐
Dialogue: 0,0:14:11.96,0:14:15.82,Default,,0,0,0,,攻击者可以用此IP地址重新执行攻击 从而潜在驱逐一个诚实节点IP地址
Dialogue: 0,0:14:15.82,0:14:20.28,Default,,0,0,0,,因此 通过不断尝试 诚实节点IP地址被驱逐的概率就会越来越高
Dialogue: 0,0:14:20.80,0:14:25.72,Default,,0,0,0,,我们之前也已经讨论过 攻击者可以保证其IP地址总是新鲜的
Dialogue: 0,0:14:25.72,0:14:33.22,Default,,0,0,0,,因此 如果4个节点中有一个诚实IP地址 攻击者基本可以保证把这个IP地址驱逐
Dialogue: 0,0:14:35.52,0:14:41.46,Default,,0,0,0,,我们已经解释了攻击方法 但谁可以实施攻击呢？是否容易实施攻击呢？
Dialogue: 0,0:14:41.46,0:14:47.16,Default,,0,0,0,,我们的验证方法是查看比特币系统源代码 利用概率分析方式建模
Dialogue: 0,0:14:47.16,0:14:55.16,Default,,0,0,0,,进一步应用蒙特卡洛仿真方法验证我们的概率分析结果
Dialogue: 0,0:14:55.82,0:15:01.20,Default,,0,0,0,,我们应用此模型确定有效的攻击参数 攻击执行时间 所需的IP地址数量
Dialogue: 0,0:15:01.92,0:15:06.64,Default,,0,0,0,,随后 我们在实际场景中对这些参数进行验证 攻击一个在线的比特币节点
Dialogue: 0,0:15:06.64,0:15:10.92,Default,,0,0,0,,我们对自己的一个比特币节点实施了攻击 但此节点确实属于比特币网络中的一部分
Dialogue: 0,0:15:11.68,0:15:17.72,Default,,0,0,0,,我们执行了多种实验 但我这里只为大家讲解其中的两个实验
Dialogue: 0,0:15:17.72,0:15:20.24,Default,,0,0,0,,第一个实验是最糟糕情况下的实验
Dialogue: 0,0:15:20.24,0:15:27.46,Default,,0,0,0,,我们想知道攻击者在何种情况下一定可以成功实施攻击 无论过表中存了什么IP地址
Dialogue: 0,0:15:27.46,0:15:36.04,Default,,0,0,0,,我们人工将过表中的IP地址用诚实IP地址填充 并在攻击前将时间戳设置为最新
Dialogue: 0,0:15:36.04,0:15:43.26,Default,,0,0,0,,我们的模型预测攻击过程需要4600个IP地址、每组两个IP地址、攻击时间为5小时
Dialogue: 0,0:15:44.04,0:15:49.38,Default,,0,0,0,,攻击结束后 节点过表中的IP地址几乎都是攻击者的IP地址
Dialogue: 0,0:15:50.14,0:16:02.58,Default,,0,0,0,,我们执行了50次实验 在每次实验中 攻击者有100%的概率日蚀全部8个对外连接
Dialogue: 0,0:16:04.62,0:16:10.02,Default,,0,0,0,,当查看已有僵尸网络的规模后 我们发现此攻击所需的僵尸网络规模很小
Dialogue: 0,0:16:10.32,0:16:14.32,Default,,0,0,0,,实际僵尸网络的IP地址更加多样化 IP地址数量也更多
Dialogue: 0,0:16:16.30,0:16:26.22,Default,,0,0,0,,因此 我们想在第二个实验中知道 此攻击在实际非最糟糕情况下的节点攻击效果
Dialogue: 0,0:16:26.22,0:16:31.14,Default,,0,0,0,,我们有一些比特币节点 我们让这些节点与比特币点对点网络连接了超过43天
Dialogue: 0,0:16:31.86,0:16:38.60,Default,,0,0,0,,我们要攻击的节点 其过表中包含了大概300个诚实IP 显然过表并没有被填满
Dialogue: 0,0:16:39.60,0:16:46.64,Default,,0,0,0,,基于此 我们认为使用一个包含400个IP的僵尸网络、执行1小时攻击就足够了
Dialogue: 0,0:16:46.64,0:16:54.32,Default,,0,0,0,,攻击结束后 过表中的大部分存储内容还是空的 但大多数IP地址都是攻击者的IP地址
Dialogue: 0,0:16:56.22,0:16:59.50,Default,,0,0,0,,我们得到攻击成功的概率为84%
Dialogue: 0,0:16:59.50,0:17:06.02,Default,,0,0,0,,我们执行了50次实验 84%的实验结果中 节点的8个对外连接都被日蚀
Dialogue: 0,0:17:07.58,0:17:13.54,Default,,0,0,0,,随后我们查看了Carna僵尸网络 因为此僵尸网络的IP地址是公开的
Dialogue: 0,0:17:14.02,0:17:19.26,Default,,0,0,0,,如果我们从Carna中随机采样1250个IP地址 
Dialogue: 0,0:17:19.26,0:17:21.38,Default,,0,0,0,,则平均上看 这些地址的分组已经足够多样化
Dialogue: 0,0:17:21.38,0:17:26.80,Default,,0,0,0,,因此 只用Carna的子集 我们就已经有了所需的、充分多样化的IP地址了
Dialogue: 0,0:17:29.26,0:17:31.26,Default,,0,0,0,,我们给出了几个日蚀攻击的抵御方法
Dialogue: 0,0:17:33.48,0:17:41.20,Default,,0,0,0,,在思考所有的漏洞后 我们提出的第一种方法针对的是IP地址新鲜时间戳选择过程
Dialogue: 0,0:17:41.62,0:17:45.58,Default,,0,0,0,,如果IP地址的选择完全是随机的 则这个漏洞就不存在了
Dialogue: 0,0:17:46.46,0:17:54.28,Default,,0,0,0,,另一个我们要解决的漏洞是有偏的IP地址驱逐过程 旧的IP地址会被驱逐
Dialogue: 0,0:17:54.78,0:18:02.66,Default,,0,0,0,,我们还要解决频繁尝试漏洞 攻击者可以利用这个漏洞提高概率…
Dialogue: 0,0:18:02.66,0:18:09.16,Default,,0,0,0,,如果攻击者的IP地址被驱逐 攻击者可以重新执行攻击 提高不被驱逐的概率
Dialogue: 0,0:18:10.10,0:18:14.12,Default,,0,0,0,,频繁尝试效果怎么样？我们画了这样一张图
Dialogue: 0,0:18:14.12,0:18:21.86,Default,,0,0,0,,y轴表示的是攻击者在过表中填充的IP地址数量 攻击者所能填充的IP地址数量
Dialogue: 0,0:18:21.86,0:18:27.04,Default,,0,0,0,,横着的这条黑线表示过表中已经存满了IP地址
Dialogue: 0,0:18:27.04,0:18:29.04,Default,,0,0,0,,大家可以看到 曲线是线性的
Dialogue: 0,0:18:29.04,0:18:34.08,Default,,0,0,0,,当插入4000个IP地址时 过表中大约也存储了4000个IP地址
Dialogue: 0,0:18:34.60,0:18:38.52,Default,,0,0,0,,因此 我们提出了确定性随机驱逐过程 以抵御日蚀攻击
Dialogue: 0,0:18:39.08,0:18:41.86,Default,,0,0,0,,此过程不仅将IP地址映射到分桶中
Dialogue: 0,0:18:41.86,0:18:44.98,Default,,0,0,0,,每个IP地址也会映射到分桶中确定的位置上 
Dialogue: 0,0:18:45.44,0:18:47.82,Default,,0,0,0,,驱逐过程也直接指向各个位置上的IP地址
Dialogue: 0,0:18:48.22,0:18:49.84,Default,,0,0,0,,这样做就可以移除这两个漏洞了
Dialogue: 0,0:18:49.84,0:18:51.68,Default,,0,0,0,,我们也能得到一个更好的曲线
Dialogue: 0,0:18:51.68,0:18:59.26,Default,,0,0,0,,此时 为了让比特币系统驱逐全部4000个IP地址 你需要万级IP地址来实施攻击
Dialogue: 0,0:19:02.28,0:19:08.40,Default,,0,0,0,,我们还需要解决的一个问题是 在实际场景中 过表的填充速度过慢
Dialogue: 0,0:19:09.12,0:19:11.24,Default,,0,0,0,,我们提出了试探连接方法
Dialogue: 0,0:19:11.24,0:19:17.76,Default,,0,0,0,,试探连接法会从已经被实际验证在线的新比特币节点中得到IP地址
Dialogue: 0,0:19:17.76,0:19:21.44,Default,,0,0,0,,随后 节点会将这些IP地址添加到过表中
Dialogue: 0,0:19:22.22,0:19:29.24,Default,,0,0,0,,另一个问题是 过表会驱逐诚实节点
Dialogue: 0,0:19:30.54,0:19:32.82,Default,,0,0,0,,因此在驱逐前我们增加了验证过程
Dialogue: 0,0:19:32.82,0:19:36.72,Default,,0,0,0,,我们验证过表中的IP地址 如果此IP地址在线 则不进行驱逐
Dialogue: 0,0:19:37.08,0:19:42.74,Default,,0,0,0,,我们提出的这个防御方法借鉴了Storm僵尸网络中抗节点污染系统的思想
Dialogue: 0,0:19:43.62,0:19:45.96,Default,,0,0,0,,我们将我们的攻击告诉了比特币开发者
Dialogue: 0,0:19:45.96,0:19:49.54,Default,,0,0,0,,他们非常惊叹 并快速进行了相应
Dialogue: 0,0:19:49.54,0:19:54.84,Default,,0,0,0,,他们在比特币v0.10.1版本中实现了防御措施1、2、6 
Dialogue: 0,0:19:54.84,0:20:02.38,Default,,0,0,0,,上次检查时 我发现60%的公开节点已经应用了此版本的比特币系统
Dialogue: 0,0:20:03.10,0:20:07.68,Default,,0,0,0,,但我们感觉“试探连接”和“驱逐前验证”也是非常重要的防御方法
Dialogue: 0,0:20:08.08,0:20:12.24,Default,,0,0,0,,我们在一个补丁中实现了这两种方法 当前此补丁正在等待被检验
Dialogue: 0,0:20:12.86,0:20:14.36,Default,,0,0,0,,这些防御方法的有效性怎么样？
Dialogue: 0,0:20:14.36,0:20:19.50,Default,,0,0,0,,我们在最糟糕场景 即过表中存储的均为诚实节点的场景下部署了这些防御方法
Dialogue: 0,0:20:19.50,0:20:27.46,Default,,0,0,0,,实施攻击所需的IP地址数量从4600个提高至41000个 成功概率降低到50%
Dialogue: 0,0:20:28.22,0:20:35.24,Default,,0,0,0,,在真实节点场景下 所需的IP地址数量大约翻了10倍 且攻击成功概率仍然变低
Dialogue: 0,0:20:36.72,0:20:41.72,Default,,0,0,0,,在最糟糕情况下 “驱逐前验证”方法效果最好
Dialogue: 0,0:20:41.72,0:20:47.26,Default,,0,0,0,,因为如果过表中存储的全都是诚实IP地址 
Dialogue: 0,0:20:48.00,0:20:53.76,Default,,0,0,0,,则攻击者无法将这些IP地址驱逐 因为诚实节点大多常处于在线状态
Dialogue: 0,0:20:53.76,0:20:56.66,Default,,0,0,0,,因此 如果你现在处于安全状态 则你基本会一直处于安全状态
Dialogue: 0,0:20:56.90,0:21:01.12,Default,,0,0,0,,在论文中 我们在假定诚实节点会更换的条件下进一步分析了此防御方法的效果
Dialogue: 0,0:21:02.10,0:21:08.42,Default,,0,0,0,,试探连接可以保护实际场景中的节点不遭受日蚀攻击
Dialogue: 0,0:21:08.42,0:21:12.28,Default,,0,0,0,,因为过表的填充速度会变得更快
Dialogue: 0,0:21:12.28,0:21:17.68,Default,,0,0,0,,这一防御方法效果更好 会使得实际攻击效果趋近于最糟糕情况下的结果
Dialogue: 0,0:21:17.68,0:21:22.62,Default,,0,0,0,,但我们后续需要执行更多的实验 进一步讨论此防御方法的效果
Dialogue: 0,0:21:24.24,0:21:28.28,Default,,0,0,0,,事实证明 此攻击确实太糟糕了 点对点网络实际上是有漏洞的
Dialogue: 0,0:21:28.76,0:21:32.90,Default,,0,0,0,,旷工或许不应该连接点对点网络 他们应该只连接诚实参与方
Dialogue: 0,0:21:33.36,0:21:35.00,Default,,0,0,0,,但谁来确定谁才是诚实参与方呢？
Dialogue: 0,0:21:35.00,0:21:40.74,Default,,0,0,0,,大矿池忙于挖矿 其行为可能更像是诚实节点
Dialogue: 0,0:21:41.14,0:21:44.12,Default,,0,0,0,,如果你在网络中创建了一个诚实节点集合
Dialogue: 0,0:21:44.12,0:21:47.46,Default,,0,0,0,,你如何让其它节点加入到此集合中 你如何确定谁才是可信的
Dialogue: 0,0:21:47.46,0:21:52.46,Default,,0,0,0,,你如何保证诚实节点集合不会成为一个中心化的节点集合呢？
Dialogue: 0,0:21:52.96,0:21:57.88,Default,,0,0,0,,我们的目标是让比特币系统在点对点系统中足够健壮
Dialogue: 0,0:21:57.88,0:22:00.84,Default,,0,0,0,,同时使比特币系统仍然去中心化 这是比特币系统的核心
Dialogue: 0,0:22:02.60,0:22:07.46,Default,,0,0,0,,最后是总结 日蚀攻击破坏了比特币的核心安全性保证
Dialogue: 0,0:22:07.86,0:22:08.88,Default,,0,0,0,,日蚀攻击实际可行的
Dialogue: 0,0:22:08.88,0:22:15.78,Default,,0,0,0,,即使利用一个非常小的僵尸网络也可以对真实比特币节点发起攻击
Dialogue: 0,0:22:16.30,0:22:19.52,Default,,0,0,0,,我们当前已经有了应对日蚀攻击的防御方法
Dialogue: 0,0:22:19.52,0:22:24.68,Default,,0,0,0,,而其中一部分防御方法已经在实际中部署 从而保护比特币系统
Dialogue: 0,0:22:45.14,0:22:46.46,Default,,0,0,0,,你好 这是个很棒的工作
Dialogue: 0,0:22:46.68,0:22:47.30,Default,,0,0,0,,谢谢
Dialogue: 0,0:22:47.30,0:22:59.96,Default,,0,0,0,,我很好奇 为何比特币开发者最初要设计一个复杂的分桶机制和随机节点选择机制？
Dialogue: 0,0:22:59.96,0:23:01.52,Default,,0,0,0,,这么设计的思考逻辑是什么？
Dialogue: 0,0:23:01.52,0:23:07.78,Default,,0,0,0,,我没法告诉你思考逻辑是什么 因为我也不知道他们的思考逻辑是什么
Dialogue: 0,0:23:09.14,0:23:13.26,Default,,0,0,0,,通过阅读代码 我猜想他们的思考逻辑是这样的
Dialogue: 0,0:23:13.26,0:23:21.82,Default,,0,0,0,,最新知道的节点处于在线状态的概率更高 因此更应该连接这些节点
Dialogue: 0,0:23:22.78,0:23:26.26,Default,,0,0,0,,不过比特币开发者很喜欢我们提出的防御方法 我们的方法可以简化代码
Dialogue: 0,0:23:26.26,0:23:33.86,Default,,0,0,0,,因此 他们很快进行了测试并完成了部署 他们认为新的机制确实优于之前的机制
Dialogue: 0,0:23:41.32,0:23:44.20,Default,,0,0,0,,你好 我是来自Rutgers大学的Grady Clark
Dialogue: 0,0:23:44.20,0:23:45.54,Default,,0,0,0,,不好意思 我想问两个问题
Dialogue: 0,0:23:45.54,0:23:51.14,Default,,0,0,0,,为什么比特币开发者只决定实现对策1、2、6 但没实现“驱逐前尝试”机制呢？
Dialogue: 0,0:23:51.14,0:23:54.70,Default,,0,0,0,,此种攻击方法的主要目标是谁？
Dialogue: 0,0:23:54.70,0:24:02.12,Default,,0,0,0,,据我所知 当然可能是错的 矿池一般只对外暴露一个节点 因此应该很难实施攻击
Dialogue: 0,0:24:02.12,0:24:04.16,Default,,0,0,0,,这就是我想问的问题 谢谢
Dialogue: 0,0:24:04.16,0:24:07.28,Default,,0,0,0,,好的 我先回答你的第一个问题
Dialogue: 0,0:24:07.94,0:24:12.02,Default,,0,0,0,,很容易实施对策1、2、6 而且实施结果也非常有效
Dialogue: 0,0:24:12.02,0:24:18.96,Default,,0,0,0,,这几个对策可以减少代码的长度 使系统更简洁 且攻击者更难实施攻击
Dialogue: 0,0:24:19.68,0:24:25.94,Default,,0,0,0,,因此 这几个对策的实施不会对代码造成太大的改变 简单修改代码即可实施完毕
Dialogue: 0,0:24:26.86,0:24:33.28,Default,,0,0,0,,“试探连接”机制和“驱逐前尝试”机制会对系统架构造成较大的影响
Dialogue: 0,0:24:33.28,0:24:37.58,Default,,0,0,0,,我们自己的补丁涉及的改动量比较大 并且这两个机制也需要更多的测试工作
Dialogue: 0,0:24:38.24,0:24:41.22,Default,,0,0,0,,我们已经完成了很多的测试 希望这两个机制能够完成部署
Dialogue: 0,0:24:41.22,0:24:44.94,Default,,0,0,0,,这就是为什么比特币开发者选择实施对策1、2、6的原因
Dialogue: 0,0:24:45.66,0:24:48.14,Default,,0,0,0,,他们可以很快地完成这三个对策的部署
Dialogue: 0,0:24:48.96,0:24:54.44,Default,,0,0,0,,至于攻击目标是谁这个问题 的确如你所说 旷工一般会使用网关
Dialogue: 0,0:24:55.02,0:25:01.38,Default,,0,0,0,,如果旷工完全依赖于点对点网络的话 那么旷工易受到此类攻击
Dialogue: 0,0:25:01.98,0:25:06.36,Default,,0,0,0,,我们没有调研旷工的现状 因此不知道那些旷工易受到攻击 哪些旷工不易受到攻击
Dialogue: 0,0:25:07.96,0:25:13.92,Default,,0,0,0,,商人也可以成为攻击目标 如果有人运行本地比特币系统 也可以用来攻击比特币钱包
Dialogue: 0,0:25:13.92,0:25:17.60,Default,,0,0,0,,如果你与另一个人在进行比特币交易 你自己也可能成为攻击目标
Dialogue: 0,0:25:17.60,0:25:24.68,Default,,0,0,0,,我们知道 某个人在一次狂欢节上实施过日蚀攻击
Dialogue: 0,0:25:24.68,0:25:31.62,Default,,0,0,0,,人们在狂欢节上用比特币购买物品 而狂欢节网络上传速度较慢 攻击实施起来更快
Dialogue: 0,0:25:31.62,0:25:35.40,Default,,0,0,0,,攻击者入侵了每个人的网络连接 把连接都指向了一个节点 
Dialogue: 0,0:25:35.40,0:25:39.66,Default,,0,0,0,,这使得所有节点依赖于单一节点的缓慢上传速度与比特币网络建立连接
Dialogue: 0,0:25:49.12,0:25:51.44,Default,,0,0,0,,你好 我是来自Rice大学的Matthew
Dialogue: 0,0:25:51.94,0:26:00.78,Default,,0,0,0,,是否可以考虑节点年龄 如果节点没有为区块链做出过贡献 就不会被添加进IP库中
Dialogue: 0,0:26:00.78,0:26:07.56,Default,,0,0,0,,相对来说 新用户更可能是攻击者 因此我们是否可以通过这种方式保护过表？
Dialogue: 0,0:26:09.02,0:26:18.28,Default,,0,0,0,,我理解一下 你是问：能否判断节点在比特币中存在的时间或对比特币做出的贡献
Dialogue: 0,0:26:18.28,0:26:18.58,Default,,0,0,0,,正确
Dialogue: 0,0:26:18.58,0:26:20.02,Default,,0,0,0,,并以此作为可信度量方式
Dialogue: 0,0:26:20.02,0:26:20.52,Default,,0,0,0,,是的
Dialogue: 0,0:26:21.32,0:26:23.70,Default,,0,0,0,,我认为这是一个很不错的想法
Dialogue: 0,0:26:24.10,0:26:29.54,Default,,0,0,0,,目前在比特币系统中 生成的区块没有与节点的IP地址关联到一起
Dialogue: 0,0:26:29.54,0:26:30.04,Default,,0,0,0,,是的
Dialogue: 0,0:26:30.04,0:26:35.68,Default,,0,0,0,,如果真能实现这样一个机制 确实可以做到查看某个节点在比特币系统中的存在时间
Dialogue: 0,0:26:35.68,0:26:43.12,Default,,0,0,0,,并认为出现时间更长的节点可信度更高 更可能是系统中的可信任节点
Dialogue: 0,0:26:43.12,0:26:47.38,Default,,0,0,0,,但是当前比特币节点不包含任何密码学身份证明机制
Dialogue: 0,0:26:47.38,0:26:50.68,Default,,0,0,0,,同时 部分节点的IP地址变化频率会比较高
Dialogue: 0,0:26:50.68,0:26:51.10,Default,,0,0,0,,是的
Dialogue: 0,0:26:51.10,0:26:55.58,Default,,0,0,0,,因此 比特币本身很难实现这样一个机制 但有可能在比特币之上建立这样的机制
Dialogue: 0,0:26:55.84,0:26:56.80,Default,,0,0,0,,谢谢
Dialogue: 0,0:27:09.36,0:27:14.36,Default,,0,0,0,,{\pos(426.333,33.333)}听译、时间轴：刘巍然（学酥）
