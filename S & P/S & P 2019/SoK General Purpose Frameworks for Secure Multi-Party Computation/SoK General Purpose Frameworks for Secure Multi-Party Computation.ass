[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Audio File: SoK General Purpose Frameworks for Secure Multi-Party Computation.mp4
Video File: SoK General Purpose Frameworks for Secure Multi-Party Computation.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Active Line: 2
Video Position: 388

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.90,Default,,0,0,0,,{\pos(639,50)}听译、时间轴：刘巍然（学酥）
Dialogue: 0,0:00:10.26,0:00:12.92,Default,,0,0,0,,非常感谢主持人的介绍
Dialogue: 0,0:00:12.92,0:00:14.78,Default,,0,0,0,,我是Marcela Hastings
Dialogue: 0,0:00:14.78,0:00:19.24,Default,,0,0,0,,这是一篇SoK论文 我将讲解我们的调研结果
Dialogue: 0,0:00:20.30,0:00:24.42,Default,,0,0,0,,我们考察的工具是安全多方计算
Dialogue: 0,0:00:24.42,0:00:32.16,Default,,0,0,0,,这是一个密码学工具 允许互不信任的参与方根据自己的输入计算任意一个函数
Dialogue: 0,0:00:32.16,0:00:36.92,Default,,0,0,0,,计算过程不泄露除输出结果以外的任何信息
Dialogue: 0,0:00:36.92,0:00:41.22,Default,,0,0,0,,安全多方计算实际应用中最著名的实例是丹麦甜菜拍卖系统
Dialogue: 0,0:00:41.22,0:00:45.18,Default,,0,0,0,,在这个场景中 售卖方是丹麦种田菜的农民
Dialogue: 0,0:00:45.18,0:00:49.50,Default,,0,0,0,,而购买方只有一个 即丹麦唯一的一个甜菜加工公司
Dialogue: 0,0:00:49.50,0:00:52.40,Default,,0,0,0,,售卖方为甜菜出价 表示他们希望按照这个价格售卖甜菜
Dialogue: 0,0:00:52.40,0:00:55.70,Default,,0,0,0,,购买方希望得知市场出清价（即保证供求关系平衡的售卖价格）
Dialogue: 0,0:00:57.84,0:01:00.30,Default,,0,0,0,,但售卖方不希望泄露自己的具体出价 
Dialogue: 0,0:01:00.30,0:01:06.24,Default,,0,0,0,,如果常年泄露出价 则其它人就会得知自己的甜菜种植能力和做生意的能力了
Dialogue: 0,0:01:06.24,0:01:14.58,Default,,0,0,0,,因此 他们使用安全多方计算协议 在不泄露售卖方出价的条件下计算市场出清价
Dialogue: 0,0:01:14.58,0:01:19.74,Default,,0,0,0,,另一个例子是波士顿妇女劳动委员会与企业的合作项目 
Dialogue: 0,0:01:19.74,0:01:23.04,Default,,0,0,0,,此项目研究员工性别是否会影响到其实际的工资
Dialogue: 0,0:01:23.04,0:01:31.50,Default,,0,0,0,,公司不希望、从法律角度也不能够对外泄露自己雇员的收入或金融类信息
Dialogue: 0,0:01:31.50,0:01:40.06,Default,,0,0,0,,但通过安全多方计算 他们可以在不给出具体数据的条件下 计算相应的统计分析结果
Dialogue: 0,0:01:40.06,0:01:47.44,Default,,0,0,0,,所有这些例子都告诉我们 安全多方计算已经足够高效 可以在实际场景中得到应用了
Dialogue: 0,0:01:47.44,0:01:50.82,Default,,0,0,0,,然而 我们之前看到的所有实际应用实例中
Dialogue: 0,0:01:50.82,0:01:57.88,Default,,0,0,0,,项目方都需要组织一个密码学专家团队 针对特定用例实现专用MPC引擎
Dialogue: 0,0:01:57.88,0:02:04.42,Default,,0,0,0,,如果想让MPC得到更广泛的应用 我们需要让不懂密码学的外行也能使用这一工具
Dialogue: 0,0:02:05.34,0:02:10.18,Default,,0,0,0,,虽然二十世纪八十年代 密码学家就提出了MPC算法
Dialogue: 0,0:02:10.18,0:02:12.68,Default,,0,0,0,,但一直以来MPC协议的效率都很低 无法在实际中使用
Dialogue: 0,0:02:12.68,0:02:16.32,Default,,0,0,0,,直到2004年“公平参与”编译器的提出改变了这一现状
Dialogue: 0,0:02:16.32,0:02:22.70,Default,,0,0,0,,“公平参与”是第一个通用MPC框架 可以通过MPC执行任意函数的计算
Dialogue: 0,0:02:22.70,0:02:29.14,Default,,0,0,0,,在接下来的10年 这一框架掀起了学者们针对MPC协议性能优化的浪潮
Dialogue: 0,0:02:29.14,0:02:34.54,Default,,0,0,0,,直至现在 无论从算法角度还是从实现层面 MPC协议得到了巨大的优化
Dialogue: 0,0:02:34.54,0:02:39.48,Default,,0,0,0,,在过去十年间 学者们提出了很多端到端MPC框架
Dialogue: 0,0:02:40.78,0:02:46.24,Default,,0,0,0,,在本工作中 我们重点考察通用端到端MPC框架
Dialogue: 0,0:02:46.24,0:02:50.16,Default,,0,0,0,,端到端框架的架构如幻灯片所示
Dialogue: 0,0:02:50.16,0:02:53.00,Default,,0,0,0,,框架一般实现了两个阶段的功能：编译器、执行器
Dialogue: 0,0:02:53.00,0:02:59.96,Default,,0,0,0,,这是因为大多数MPC算法只支持有限的算子 如模质数下的加法和乘法
Dialogue: 0,0:02:59.96,0:03:05.50,Default,,0,0,0,,开发者很难应用这些有限的算子实现所需的计算函数
Dialogue: 0,0:03:05.50,0:03:07.70,Default,,0,0,0,,因此 我们重点考察包含一个编译器的框架
Dialogue: 0,0:03:07.70,0:03:16.08,Default,,0,0,0,,编译器的输入是用高级语言描述的函数 编译器会把函数编译成算法可执行的协议
Dialogue: 0,0:03:16.08,0:03:20.00,Default,,0,0,0,,接下来 执行器会具体执行编译好的协议
Dialogue: 0,0:03:20.00,0:03:23.04,Default,,0,0,0,,协议会在多个参与方上同时执行
Dialogue: 0,0:03:23.04,0:03:30.86,Default,,0,0,0,,每个参与方都以编译器的输出结果和自己的秘密值作为输入 计算得到函数输出结果
Dialogue: 0,0:03:30.86,0:03:34.40,Default,,0,0,0,,当然了 不同框架的架构各不相同
Dialogue: 0,0:03:34.40,0:03:36.86,Default,,0,0,0,,但是它们基本都是这样的结构
Dialogue: 0,0:03:36.86,0:03:40.42,Default,,0,0,0,,在本综述中 我们想回答这样一些问题
Dialogue: 0,0:03:41.40,0:03:44.22,Default,,0,0,0,,目前都有哪些框架？
Dialogue: 0,0:03:44.22,0:03:45.22,Default,,0,0,0,,谁在使用这些框架？
Dialogue: 0,0:03:45.22,0:03:47.20,Default,,0,0,0,,这些框架是否可以实现实际的计算过程？
Dialogue: 0,0:03:47.20,0:03:49.66,Default,,0,0,0,,这些框架是否可以支持所需函数的计算？
Dialogue: 0,0:03:49.66,0:03:54.22,Default,,0,0,0,,这些框架是否可以在实际中使用？
Dialogue: 0,0:03:54.22,0:04:00.98,Default,,0,0,0,,为了回答这些问题 我们调查了9个端到端框架和2个电路编译器
Dialogue: 0,0:04:00.98,0:04:03.02,Default,,0,0,0,,我们记录了这些框架的不同特性
Dialogue: 0,0:04:03.02,0:04:08.88,Default,,0,0,0,,包括框架所实现的协议 框架所支持的数据类型和运算操作
Dialogue: 0,0:04:08.88,0:04:11.12,Default,,0,0,0,,以及其它一些实现的具体细节
Dialogue: 0,0:04:11.12,0:04:15.12,Default,,0,0,0,,我们通过多种可用性标准对这些协议进行评价
Dialogue: 0,0:04:15.12,0:04:20.70,Default,,0,0,0,,为了收集这些数据 我们在每个框架上实现3个样例程序
Dialogue: 0,0:04:21.80,0:04:32.10,Default,,0,0,0,,我们把每个框架的完整构建环境及其对应的样例程序都放在了开源的代码仓库中
Dialogue: 0,0:04:32.10,0:04:36.56,Default,,0,0,0,,结合这些框架的使用经验 我们为各个框架补充了相应的文档
Dialogue: 0,0:04:36.56,0:04:41.74,Default,,0,0,0,,构建代码仓库的总时间约为750人小时
Dialogue: 0,0:04:42.68,0:04:45.68,Default,,0,0,0,,此仓库是开源的 我们仍然在积极地维护这一仓库
Dialogue: 0,0:04:45.68,0:04:47.76,Default,,0,0,0,,非常希望大家能看看这个代码仓库
Dialogue: 0,0:04:47.76,0:04:51.74,Default,,0,0,0,,现在 我想简单介绍一下 完成这些工作后我们所得到的一些结论
Dialogue: 0,0:04:51.74,0:04:55.00,Default,,0,0,0,,总的来说 几乎所有的框架做得都不错
Dialogue: 0,0:04:55.00,0:04:58.38,Default,,0,0,0,,各种框架在不同的安全模型下实现了不同的协议
Dialogue: 0,0:04:58.38,0:05:01.78,Default,,0,0,0,,根据具体用例的不同 框架也提供了一些协议和安全模型的选项
Dialogue: 0,0:05:01.78,0:05:05.98,Default,,0,0,0,,我们可以在几乎所有的框架上实现我们的样例程序
Dialogue: 0,0:05:05.98,0:05:10.16,Default,,0,0,0,,这意味着对于绝大多数场景来说 框架的高层语言具有较好的可表达性
Dialogue: 0,0:05:10.16,0:05:14.80,Default,,0,0,0,,总的来说 大多数框架都是开源的、可编译的、可用的
Dialogue: 0,0:05:14.80,0:05:17.98,Default,,0,0,0,,然而 我们发现了两个重要的改进方向
Dialogue: 0,0:05:17.98,0:05:23.44,Default,,0,0,0,,第一个方向是：框架的工程局限性较高 例如 框架的系统构建环境过于复杂
Dialogue: 0,0:05:23.44,0:05:29.02,Default,,0,0,0,,第二个方向是：框架的可用性较差 其根本原因主要在于框架缺失相应的文档
Dialogue: 0,0:05:29.88,0:05:35.72,Default,,0,0,0,,在具体讲解这些问题之前 我想先从宏观层面介绍我们的发现
Dialogue: 0,0:05:35.72,0:05:40.08,Default,,0,0,0,,我们考察了9个框架 最下方是2个电路编译器
Dialogue: 0,0:05:40.08,0:05:42.84,Default,,0,0,0,,大家可以从表格中看到框架支持的参与方数量、支持的安全模型
Dialogue: 0,0:05:42.84,0:05:44.24,Default,,0,0,0,,我们有两种安全模型
Dialogue: 0,0:05:44.24,0:05:49.32,Default,,0,0,0,,在半诚实模型中 攻击者会正确执行协议
Dialogue: 0,0:05:49.32,0:05:52.64,Default,,0,0,0,,但是攻击者会尝试得到其它参与方的输入
Dialogue: 0,0:05:52.64,0:06:01.80,Default,,0,0,0,,在恶意模型中 攻击者不会遵从约定执行协议 以错误的协议执行结果中推断信息
Dialogue: 0,0:06:03.50,0:06:09.36,Default,,0,0,0,,我们还对不同的协议进行了简单的分类 这里需要简单解释一下
Dialogue: 0,0:06:09.36,0:06:14.66,Default,,0,0,0,,第一类协议是乱码电路协议 最初由姚期智于二十世纪八十年代提出
Dialogue: 0,0:06:14.66,0:06:18.78,Default,,0,0,0,,自姚期智提出此协议以来 学者们持续不断地对协议进行改进
Dialogue: 0,0:06:18.78,0:06:23.78,Default,,0,0,0,,理论密码学家从不同角度对乱码电路进行了优化
Dialogue: 0,0:06:24.76,0:06:30.56,Default,,0,0,0,,从实际中我们发现 几乎所有的框架都实现了半诚实两方协议
Dialogue: 0,0:06:30.56,0:06:34.92,Default,,0,0,0,,一个参与方对电路加密后将结果发送给另一个参与方
Dialogue: 0,0:06:34.92,0:06:37.52,Default,,0,0,0,,另一个参与方根据输入对电路求值
Dialogue: 0,0:06:37.52,0:06:41.60,Default,,0,0,0,,在乱码电路中 需要把函数表示为布尔电路的形式
Dialogue: 0,0:06:41.60,0:06:47.94,Default,,0,0,0,,第二类协议包含很多不同的协议 我们称这类协议为基于电路的多方计算协议
Dialogue: 0,0:06:48.66,0:06:53.04,Default,,0,0,0,,这些协议拥有两个共同的特性
Dialogue: 0,0:06:53.04,0:06:59.36,Default,,0,0,0,,第一个特性是 需要把函数表示为代数电路或者布尔电路的形式
Dialogue: 0,0:06:59.36,0:07:03.08,Default,,0,0,0,,第二个特性是 数据需要用线性秘密分享的形式表示
Dialogue: 0,0:07:03.08,0:07:09.52,Default,,0,0,0,,线性秘密分享意味着协议支持任意数量的参与方
Dialogue: 0,0:07:09.52,0:07:18.04,Default,,0,0,0,,参与方协同工作 依次对门电路求值 将秘密分享输入转换为秘密分享输出
Dialogue: 0,0:07:18.04,0:07:23.16,Default,,0,0,0,,然而 在基于电路的多方计算模型下 不同协议将输入转换为输出的方式不太相同
Dialogue: 0,0:07:23.16,0:07:26.94,Default,,0,0,0,,可以基于信息论安全模型下转换 也可以基于密码安全模型下转换
Dialogue: 0,0:07:27.92,0:07:34.66,Default,,0,0,0,,我们认为这两类协议可以涵盖大多数框架的基础协议
Dialogue: 0,0:07:35.24,0:07:44.52,Default,,0,0,0,,在理论层面 大多数理论密码学家用非常有限的运算操作定义MPC协议
Dialogue: 0,0:07:44.52,0:07:53.18,Default,,0,0,0,,涉及的运算操作只包含模整数下的加法和乘法 或者逐比特与预算和异或运算
Dialogue: 0,0:07:53.18,0:07:59.58,Default,,0,0,0,,这两类运算操作都是图灵完备的 任何函数都可以用这两种运算操作表示
Dialogue: 0,0:07:59.58,0:08:08.00,Default,,0,0,0,,然而在实际中 我们需要为代数模型下的除法、比较等公共函数定义更优的子协议
Dialogue: 0,0:08:08.00,0:08:13.22,Default,,0,0,0,,这样我们就不用把所有函数都表示为基本运算操作 从而提高函数表达的效率
Dialogue: 0,0:08:13.22,0:08:18.04,Default,,0,0,0,,我们发现有3个框架实现了特定的子协议
Dialogue: 0,0:08:18.04,0:08:20.16,Default,,0,0,0,,我们称这类协议为混合协议
Dialogue: 0,0:08:20.16,0:08:23.04,Default,,0,0,0,,在最下方 大家可以看到2个电路编译器
Dialogue: 0,0:08:24.50,0:08:36.54,Default,,0,0,0,,当选择适当的框架时 人们需要着重考虑的是：高层语言对协议的抽象能力
Dialogue: 0,0:08:36.54,0:08:40.86,Default,,0,0,0,,不同框架都实现了协议的抽象 我们对这些高层语言展开了考察
Dialogue: 0,0:08:40.86,0:08:44.60,Default,,0,0,0,,我们测试的其中一个样例程序是内积运算
Dialogue: 0,0:08:44.60,0:08:47.84,Default,,0,0,0,,内积运算是指逐位计算乘积 再对各个结果求和
Dialogue: 0,0:08:49.04,0:08:54.06,Default,,0,0,0,,Frigate是一个电路编译器 它的高层语言是非常传统的C语言风格抽象
Dialogue: 0,0:08:54.06,0:08:57.60,Default,,0,0,0,,大家可以看一下幻灯片上给出的内积运算代码实现
Dialogue: 0,0:08:57.60,0:09:00.28,Default,,0,0,0,,初始化结果变量 在向量上构建循环语句
Dialogue: 0,0:09:00.28,0:09:04.64,Default,,0,0,0,,循环中依次取出向量中的每一个元素 计算各个元素的乘积 最后对乘积求和
Dialogue: 0,0:09:04.64,0:09:07.10,Default,,0,0,0,,实现过程非常直观 通俗易懂
Dialogue: 0,0:09:07.10,0:09:12.84,Default,,0,0,0,,然而 如果你熟悉MPC 你可能会知道在线性秘密分享模型中
Dialogue: 0,0:09:12.84,0:09:18.86,Default,,0,0,0,,我们可以通过一轮交互并行处理所有的乘法运算
Dialogue: 0,0:09:18.86,0:09:23.42,Default,,0,0,0,,如果你希望得到优化后的协议 你可能就需要使用PICCO等框架了
Dialogue: 0,0:09:23.42,0:09:28.26,Default,,0,0,0,,PICCO会对内积运算的乘法进行了并行优化
Dialogue: 0,0:09:28.26,0:09:34.60,Default,,0,0,0,,它们实现了一个针对内积运算的自定义算子 所以PICCO是一个混合协议框架
Dialogue: 0,0:09:34.60,0:09:42.98,Default,,0,0,0,,大家可以看到 可以用这个非常简单的自定义算子求两个任意长向量的内积结果
Dialogue: 0,0:09:42.98,0:09:46.08,Default,,0,0,0,,即使你不熟悉密码学 也可以很方便地直接使用自定义算子
Dialogue: 0,0:09:46.08,0:09:48.44,Default,,0,0,0,,你也不需要关注底层到底做了什么
Dialogue: 0,0:09:48.44,0:09:54.38,Default,,0,0,0,,然而 如果你是一个密码学家 你想实现一个比内积更复杂的函数
Dialogue: 0,0:09:54.38,0:09:59.62,Default,,0,0,0,,你可能会希望对生成的电路做更深度的控制和修改
Dialogue: 0,0:09:59.62,0:10:03.38,Default,,0,0,0,,这种情况下 你可能会使用ABY这样的框架
Dialogue: 0,0:10:03.38,0:10:09.80,Default,,0,0,0,,ABY是一个端到端框架 在C语言上实现了一个函数库
Dialogue: 0,0:10:09.80,0:10:13.80,Default,,0,0,0,,大家可以看到 我们用一个share类管理秘密数据
Dialogue: 0,0:10:13.80,0:10:15.78,Default,,0,0,0,,我们随后放置一个乘法门
Dialogue: 0,0:10:15.78,0:10:20.78,Default,,0,0,0,,ABY会帮助我们实现乘法的并行优化
Dialogue: 0,0:10:20.78,0:10:26.36,Default,,0,0,0,,我们需要一个乘法门对整个向量逐位计算乘法
Dialogue: 0,0:10:26.36,0:10:31.46,Default,,0,0,0,,随后 我们把向量展开 对所有乘法运算结果求和
Dialogue: 0,0:10:31.46,0:10:35.36,Default,,0,0,0,,这可以给我们更大的自由 实现我们想实现的函数
Dialogue: 0,0:10:35.36,0:10:40.02,Default,,0,0,0,,但如果你对密码背景不熟悉 你可能就不想具备这些自定义的能力
Dialogue: 0,0:10:40.02,0:10:44.10,Default,,0,0,0,,这就是我们考察的前后端高层语言的范围
Dialogue: 0,0:10:45.32,0:10:48.62,Default,,0,0,0,,我们下一个想讨论的内容是这些框架的一些限制
Dialogue: 0,0:10:48.62,0:10:52.48,Default,,0,0,0,,正如我前面提到的 软件工程是这些框架中最主要的问题
Dialogue: 0,0:10:52.48,0:10:56.52,Default,,0,0,0,,大家一定要记住 大多数框架都是在学术研究场景下开发的
Dialogue: 0,0:10:56.52,0:11:00.72,Default,,0,0,0,,因此 这些框架在工程落地时会有很多的限制
Dialogue: 0,0:11:02.80,0:11:05.94,Default,,0,0,0,,在我讲解下面内容的过程中 大家要把这一点牢记于心
Dialogue: 0,0:11:05.94,0:11:11.36,Default,,0,0,0,,最主要的痛点是构建系统 系统的整个构建过程非常复杂
Dialogue: 0,0:11:11.36,0:11:17.06,Default,,0,0,0,,你需要从源代码层面编译特定版本的OpenSSL库 这就要花费很长的时间
Dialogue: 0,0:11:17.06,0:11:22.34,Default,,0,0,0,,或者你需要建立一个自定义的证书认证机构 从而建立秘密通信信道
Dialogue: 0,0:11:22.34,0:11:26.94,Default,,0,0,0,,光编译每一个框架平均就要花费我们1-2周的时间
Dialogue: 0,0:11:26.94,0:11:33.44,Default,,0,0,0,,这个过程苦不堪言 但是大家很幸运 我们已经把编译好的环境放在了Docker仓库里
Dialogue: 0,0:11:33.44,0:11:36.04,Default,,0,0,0,,所以大家不需要再重复一遍此项工作了
Dialogue: 0,0:11:37.48,0:11:43.74,Default,,0,0,0,,在系统构建之上 要使用这些软件框架项目 我们还需要很多的软件开发工作
Dialogue: 0,0:11:43.74,0:11:53.02,Default,,0,0,0,,正确实现密码学协议已经很困难了 但在这之上 开发者还需要实现很多支持系统
Dialogue: 0,0:11:53.02,0:12:04.82,Default,,0,0,0,,例如分布式通信、用安全语言实现与其它通信系统的交互
Dialogue: 0,0:12:04.82,0:12:08.32,Default,,0,0,0,,这方面的结论虽然比较细节 但仍然令人沮丧
Dialogue: 0,0:12:08.32,0:12:13.90,Default,,0,0,0,,例如 在ObliVM中 我们无法编写一个返回结果超过32比特的计算函数
Dialogue: 0,0:12:13.90,0:12:18.02,Default,,0,0,0,,我们可以通过进一步的代码开发来解决这个问题
Dialogue: 0,0:12:18.02,0:12:26.02,Default,,0,0,0,,由于框架都是在学术层面上开发的 框架在实现层面上都不太完美
Dialogue: 0,0:12:27.42,0:12:31.98,Default,,0,0,0,,另一个比较严重的问题是可用性 尤其是文档比较匮乏
Dialogue: 0,0:12:31.98,0:12:35.30,Default,,0,0,0,,如幻灯片所示 我们定义了5类文档
Dialogue: 0,0:12:35.30,0:12:38.36,Default,,0,0,0,,一半框架都缺失了至少3类文档
Dialogue: 0,0:12:38.36,0:12:41.44,Default,,0,0,0,,我这里不详细介绍每一类文档的细节
Dialogue: 0,0:12:41.44,0:12:49.48,Default,,0,0,0,,而是想给大家展示几个例子 从而证明语言文档的缺失极大地影响框架的可用性
Dialogue: 0,0:12:49.48,0:12:54.84,Default,,0,0,0,,语言文档指的是描述如何使用高层语言的文档
Dialogue: 0,0:12:56.28,0:13:03.94,Default,,0,0,0,,CBMC-GC是一个电路编译器 可以将代码编译成乱码电路
Dialogue: 0,0:13:03.94,0:13:05.68,Default,,0,0,0,,大多数人都熟悉C语言
Dialogue: 0,0:13:05.68,0:13:11.16,Default,,0,0,0,,假设我们要实现这样一个简单的程序 把两个数直接相乘 这个代码感觉上是正确的
Dialogue: 0,0:13:11.16,0:13:14.98,Default,,0,0,0,,然而 我们会得到一个编译错误：我们忘记返回一个值
Dialogue: 0,0:13:14.98,0:13:22.80,Default,,0,0,0,,实际上 在CBMC-GC中 计算过程中的所有秘密输入的变量名都需要以input开头
Dialogue: 0,0:13:22.80,0:13:27.80,Default,,0,0,0,,这根本不算是一个问题 但是并没有文档说明这一点 我们有必要告诉大家
Dialogue: 0,0:13:27.80,0:13:30.06,Default,,0,0,0,,另一个例子来自于ObliVM
Dialogue: 0,0:13:30.06,0:13:35.42,Default,,0,0,0,,这是一个将类Java语言作为高层语言的端到端框架
Dialogue: 0,0:13:35.42,0:13:39.54,Default,,0,0,0,,与前面相同 我们的程序是计算两个数的乘积
Dialogue: 0,0:13:39.54,0:13:41.44,Default,,0,0,0,,但我们碰上了解析错误
Dialogue: 0,0:13:41.44,0:13:44.86,Default,,0,0,0,,事实上 Alice和Bob是此高层语言中的保留关键词
Dialogue: 0,0:13:44.86,0:13:48.66,Default,,0,0,0,,因此 我们不能把这两个词作为变量名
Dialogue: 0,0:13:48.66,0:13:55.34,Default,,0,0,0,,Wisteria是开发编程语言的人所撰写的端到端框架
Dialogue: 0,0:13:55.34,0:13:58.54,Default,,0,0,0,,此框架使用函数式语言来描述计算函数
Dialogue: 0,0:13:58.54,0:14:06.28,Default,,0,0,0,,此框架包含了一个详尽的语言指南 告诉大家如何使用函数式语言编写计算函数
Dialogue: 0,0:14:06.28,0:14:11.78,Default,,0,0,0,,然而 语言文档没有考虑到解析器的限制要求
Dialogue: 0,0:14:11.78,0:14:17.08,Default,,0,0,0,,开发者需要在代码中放置很多的括号 编译器才能编译通过
Dialogue: 0,0:14:17.08,0:14:21.82,Default,,0,0,0,,EMP-toolkit是一个我们非常喜欢使用的框架 这是一个基于乱码电路的框架
Dialogue: 0,0:14:21.82,0:14:28.58,Default,,0,0,0,,然而 我们发现平均600行代码才会有1行注释 并且没有单独的代码解释文档
Dialogue: 0,0:14:28.58,0:14:34.88,Default,,0,0,0,,这些问题都会导致框架难以使用
Dialogue: 0,0:14:34.88,0:14:38.10,Default,,0,0,0,,然而 有一些框架的文档工作做得很好
Dialogue: 0,0:14:38.10,0:14:40.06,Default,,0,0,0,,我真挚地感谢这些框架的作者
Dialogue: 0,0:14:40.06,0:14:45.66,Default,,0,0,0,,对于那些维护一个较大开源项目框架的开发者 我想给出两个重要的建议
Dialogue: 0,0:14:45.66,0:14:52.68,Default,,0,0,0,,第一个建议是 即使针对不同方面的很简单的文档 也会大幅提高框架的可用性
Dialogue: 0,0:14:52.68,0:14:56.70,Default,,0,0,0,,不同类型的文档指的是 可能有一个文档解释框架的架构
Dialogue: 0,0:14:56.70,0:15:03.22,Default,,0,0,0,,另一个文档是带注释的样例程序 演示一些高层语言的特性
Dialogue: 0,0:15:03.22,0:15:09.32,Default,,0,0,0,,第二个建议是在线资源 例如提供一个邮件列表或在GitHub上开启问题追踪
Dialogue: 0,0:15:09.32,0:15:13.66,Default,,0,0,0,,这是一个持续生成、持续更新框架文档的好方法
Dialogue: 0,0:15:13.66,0:15:18.60,Default,,0,0,0,,问题追踪就像一个在线问答平台 这样你就不用通过邮件重复回答相同的问题了
Dialogue: 0,0:15:18.60,0:15:23.02,Default,,0,0,0,,问题追踪也是用户之间相互交流的平台 他们可以互相回答遇到的问题
Dialogue: 0,0:15:23.02,0:15:29.22,Default,,0,0,0,,如果你不再想维护你的框架 用户仍然可以相互讨论 解答相应的问题
Dialogue: 0,0:15:30.96,0:15:38.66,Default,,0,0,0,,即使有这些工程和可用性方面的问题 MPC框架的实现情况还是非常乐观的
Dialogue: 0,0:15:38.66,0:15:43.26,Default,,0,0,0,,我们可以在框架上实现很多样例程序
Dialogue: 0,0:15:43.26,0:15:45.98,Default,,0,0,0,,总体来说 实现过程还是很顺利的
Dialogue: 0,0:15:45.98,0:15:48.98,Default,,0,0,0,,社区也发现了框架可用性的问题
Dialogue: 0,0:15:48.98,0:15:53.12,Default,,0,0,0,,IARPA HECTOR项目正在赞助下一代MPC框架的实现
Dialogue: 0,0:15:53.12,0:15:57.58,Default,,0,0,0,,在赞助中 它们专门提出了可用性评价标准
Dialogue: 0,0:15:57.58,0:16:02.50,Default,,0,0,0,,我们强烈建议后续的开发者们可以与编程语言研究者合作
Dialogue: 0,0:16:02.50,0:16:05.60,Default,,0,0,0,,大多数框架都是由密码学家实现的
Dialogue: 0,0:16:05.60,0:16:10.06,Default,,0,0,0,,因此前后端语言的设计可能不是很规范
Dialogue: 0,0:16:10.06,0:16:14.90,Default,,0,0,0,,编译器经验充分的开发人员介入 会对语言设计有更好的帮助
Dialogue: 0,0:16:14.90,0:16:18.16,Default,,0,0,0,,插播一条广告 我们仍然在积极维护我们的代码仓库
Dialogue: 0,0:16:18.16,0:16:21.40,Default,,0,0,0,,我们随时准备接受新框架、已有框架的提交请求
Dialogue: 0,0:16:21.40,0:16:30.70,Default,,0,0,0,,如果你在维护其中一些框架 或者想在学术项目中使用这些框架 建议看看此代码仓库
Dialogue: 0,0:16:30.70,0:16:37.24,Default,,0,0,0,,最后一条广告 我们在寻找MPC的落地项目
Dialogue: 0,0:16:37.24,0:16:41.88,Default,,0,0,0,,如果你是潜在合作方 如果你有一个有趣的项目 请稍后与我们联系
Dialogue: 0,0:16:41.88,0:16:43.38,Default,,0,0,0,,非常感谢
Dialogue: 0,0:16:45.34,0:16:46.20,Default,,0,0,0,,非常感谢
Dialogue: 0,0:16:48.70,0:16:51.54,Default,,0,0,0,,如果有问题的话 请用麦克风提问
Dialogue: 0,0:16:57.08,0:17:00.42,Default,,0,0,0,,你好 首先非常感谢你们所做的工作
Dialogue: 0,0:17:00.42,0:17:05.08,Default,,0,0,0,,社区迫切需要你们所做的工作 这个工作非常令人激动
Dialogue: 0,0:17:05.08,0:17:09.44,Default,,0,0,0,,我知道你们完成了这一概览性的工作
Dialogue: 0,0:17:09.44,0:17:12.24,Default,,0,0,0,,你们也得到了一些好的结论 一些不好的结论
Dialogue: 0,0:17:12.24,0:17:19.04,Default,,0,0,0,,但你们没有给出类似这样的结论：这是正确的框架
Dialogue: 0,0:17:19.04,0:17:24.94,Default,,0,0,0,,社区应该在这个框架的基础上继续构建 或者类似的结论
Dialogue: 0,0:17:24.94,0:17:31.62,Default,,0,0,0,,这样的结论可能会非常重要 因为如果没有这样的结论 最后的情况可能就是
Dialogue: 0,0:17:31.62,0:17:35.38,Default,,0,0,0,,哦不 这里有12个标准 我们要尝试构建一个标准 然后我们就得到了第13个标准
Dialogue: 0,0:17:35.38,0:17:35.88,Default,,0,0,0,,是的
Dialogue: 0,0:17:35.88,0:17:37.94,Default,,0,0,0,,你能给出类似这样的结论吗？
Dialogue: 0,0:17:37.94,0:17:43.38,Default,,0,0,0,,当然可以 在论文中 我们明确给出了建议 推荐使用哪些框架
Dialogue: 0,0:17:44.30,0:17:51.16,Default,,0,0,0,,如果你在为某个特定场景寻求建议 我这里可以给出4个不同场景下的推荐
Dialogue: 0,0:17:51.16,0:17:56.22,Default,,0,0,0,,对于乱码电路框架来说 Obliv-C是一个不错的通用框架
Dialogue: 0,0:17:56.22,0:18:00.78,Default,,0,0,0,,如果你一些密码学专业知识 EMP-toolkit会更适合你
Dialogue: 0,0:18:01.48,0:18:09.58,Default,,0,0,0,,SCALE-MAMBA最适合多参与方场景 或者说这是一个混合协议框架
Dialogue: 0,0:18:09.58,0:18:13.02,Default,,0,0,0,,因此 这是最好的线性秘密分享协议框架
Dialogue: 0,0:18:13.96,0:18:16.96,Default,,0,0,0,,此框架的适用性很广泛 更新仍然很活跃
Dialogue: 0,0:18:16.96,0:18:22.92,Default,,0,0,0,,如果你有特定的安全需求 你可能会对Sharemind感兴趣
Dialogue: 0,0:18:22.92,0:18:27.42,Default,,0,0,0,,这是唯一一个付费开发者维护的框架 而且开发者是学术领域的研究人员
Dialogue: 0,0:18:27.42,0:18:31.94,Default,,0,0,0,,这就是我给出的推荐建议
Dialogue: 0,0:18:32.88,0:18:33.66,Default,,0,0,0,,谢谢
Dialogue: 0,0:18:34.56,0:18:41.62,Default,,0,0,0,,我绝对也会开发一个将Alice和Bob作为保留关键词的编程语言 这太酷了
Dialogue: 0,0:18:42.24,0:18:44.14,Default,,0,0,0,,再次感谢你的精彩演讲
Dialogue: 0,0:18:44.14,0:18:45.12,Default,,0,0,0,,谢谢
Dialogue: 0,0:18:44.04,0:18:49.04,Default,,0,0,0,,{\pos(639,50)}听译、时间轴：刘巍然（学酥）
